package org.webmacro.template;import java.io.ByteArrayOutputStream;import org.webmacro.Context;import org.webmacro.FastWriter;import org.webmacro.Template;import org.webmacro.engine.StringTemplate;/** *  Tests the expected and unexpected behavior *  of writing to the output stream with a context variable. *  * @author Lane Sharman */public class TestSharedOutputStream extends TemplateTestCase{  String template = "Royal $ml.render()";  String eval = "Royal Pain";      abstract public static class Render    {      String value = "Pain";      abstract String render() throws Exception;    }    public static class StringRender extends Render    {      /** Returns the value. Subclasses must render to the destination. */      public String render() throws Exception      {        return value;      }    }      public static class WriterRender extends Render    {      FastWriter destination;      WriterRender(FastWriter destination)      {        this.destination = destination;      }      public String render() throws Exception      {        destination.write(value.getBytes());        // We need to flush the output.        destination.flush();        return "";      }    }    public TestSharedOutputStream(String name)  {    super(name);  }  public void stuffContext(Context context, Render ml) throws Exception  {    context.put("ml", ml);  }  public void stuffContext(Context context) throws Exception  {  }  public void testStringRender() throws Exception  {    stuffContext(_context, new StringRender());    assertStringTemplateEquals(template, eval);  }    /*   * This is the test case which "fails".   * <p>   * Actually, I do not see why this is a failure   * since the context object is getting written ahead of   * the template. (LWS).   */  public void testStreamWriter() throws Exception  {    ByteArrayOutputStream out = new ByteArrayOutputStream();    FastWriter fw = _wm.getFastWriter(out, "UTF8");    stuffContext(_context, new WriterRender(fw));    Template t = new StringTemplate(_wm.getBroker(), template);    t.write(out, _context);    if (! out.toString().equals(eval))    {      showError(template, eval, out.toString());    }  }  }