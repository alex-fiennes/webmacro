INSTALLING THE WEBMACRO EXAMPLES
======================================

This document describes how to install and configure the examples packaged
with WebMacro Release 2. There are a couple of important things to think about
in using the examples. Some of them are drop-dead simple. You run a simple servlet
and the servlet loads and evaluates its template to produc the output. 
You run a simple main method that parses/evaluates a template. 

These examples establish a comfort level with WebMacro. There are other 
examples from various projects which have been contributed for you to browse
in the advanced folder under examples/. 

And, there is CVS at SourceForge. This permits you to check
out the devlopment tree and run the test suite. This is another
excellent source for learning by example. "test" is the task you will use.
test/unit is the source tree that the task references.

With an IDE such as Eclipse or IntelliJ, it is easy to run interactively
an example by wrapping a main method around the target example class,
especially if it is a standalone example.

With the advanced examples, no effort has been made
to reproduce finihsed applications. Rather, the specimens in the 
advanced directory represent production, unit test java or webmacro templates
which illustrate one or more areas of WebMacro usage. 

The servlet examples expect a servlet container
such as Tomcat and Resin, two popular Java servlet containers. Other examples,
eg, Standalone.java, do not require a servlet container to use.
Care has been made to remain backward compatible with all servlet specs
from 2.2 thru 2.4.

Compliant servlet containers should work very similarly.
The sources were compiled using Sun's JDK1.4 and JDK1.5. Both JDKs are
supported under Release 2 of WebMacro.

Unix/Linux configuration should be virtually identical (except for the slashes 
and drive letters in the paths). All paths given such as 
release/examples/ are relative to "release" which will be a
specific version, eg, "webmacro-2.0".

TOMCAT CONFIGURATION ( tested v5.5.9)
=========================================

There are two ways to get started:

a) Copy the files from release/examples/* to a webapps directory named wm/. This
will create a working web application. You will want to manually copy jar files
to the WEB-INF/lib folder such as webmacro.jar and concurrent.jar which are in the
root of the webmacro folder /release.

b) The preferred method to build your example app is to use the ant build.xml file.
Edit the build.xml file in the examples directory. Set your web home variable
in the build file and run the task "web" which will extract the files
from the release and examples directory. It will compile and build a 
ready-to-go web application running under Tomcat.
 
For example, if your TOMCAT_HOME is \tomcat then, (a) or (b) should result in a web
application in \tomcat\webapps\wm.  The directory tree will look like this:

HTML, XML and text:
	\tomcat\webapps\wm\index.html
	\tomcat\webapps\wm\README
	\tomcat\webapps\wm\build.xml

WebMacro configuration fil
	\tomcat\webapps\wm\WebMacro.properties

Sample batch file for compiling sources:	
	\tomcat\webapps\wm\build.bat

Templates:
	\tomcat\webapps\wm\allguest.wm
	\tomcat\webapps\wm\callgraph.wm
	\tomcat\webapps\wm\error.wm
	\tomcat\webapps\wm\form.wm
	\tomcat\webapps\wm\helloWorld.wm
	\tomcat\webapps\wm\noservlet.wm
	\tomcat\webapps\wm\profile.wm
	\tomcat\webapps\wm\sandbox.wm
	\tomcat\webapps\wm\verify.wm
	\tomcat\webapps\wm\WEB-INF\classes\standalone.wm
	advanced templates
	\tomcat\webapps\wm\advanced\index.html and advanced\*.tml 

Java sources:	
	\tomcat\webapps\wm\GuestBook.java
	\tomcat\webapps\wm\HelloWorld.java
	\tomcat\webapps\wm\NoServlet.java
	\tomcat\webapps\wm\Profile.java
	\tomcat\webapps\wm\SandBox.java
	\tomcat\webapps\wm\Standalone.java
	
Class files:	
	\tomcat\webapps\wm\WEB-INF\classes\GuestBook$GuestEntry.class
	\tomcat\webapps\wm\WEB-INF\classes\GuestBook.class
	\tomcat\webapps\wm\WEB-INF\classes\HelloWorld.class
	\tomcat\webapps\wm\WEB-INF\classes\NoServlet.class
	\tomcat\webapps\wm\WEB-INF\classes\Profile.class
	\tomcat\webapps\wm\WEB-INF\classes\SandBox.class
	\tomcat\webapps\wm\WEB-INF\classes\Standalone.class
	
WebMacro jar:
	\tomcat\webapps\wm\WEB-INF\lib\webmacro.jar
	
Web App Configuration
	\tomcat\webapps\wm\WEB-INF\web.xml
	
The web.xml file will activate the Tomcat invoker so you can run the servlet examples.
	

RESIN CONFIGURATION (3.x)
============================

Extract the files as above to the <resin_home>/doc directory.  Add the 
following lines to the resin.conf file (usually in <resin_home>/conf) 
within the <host> tag (just above the </host> tag):

    <web-app id='wm'>
      <servlet-mapping url-pattern='/servlet/*' servlet-name='invoker'/>
      <welcome-file-list>index.html</welcome-file-list>
    </web-app>
    
*ALTERNATIVE CONFIGURATION FOR RESIN*

This technique avoids moving directories all over the place.

Assume that you have installed webmacro/ in /usr/local/web 
and /usr/local/web is an application root directory for http://localhost

  1) Copy webmacro.jar to <resin_home>/lib
  2) Add the following to your resin.conf within the application host section:
     <web-app id='wm' app-dir='webmacro/examples'>
      <servlet-mapping url-pattern='/servlet/*' servlet-name='invoker'/>
      <welcome-file-list>index.html</welcome-file-list>
    </web-app>

http://localhost/wm should serve up the index.html page and the links in the page
should serve up the servlets.
  

*NOTE ON TEMPLATE PATHS*
	
Notice that all the templates are located in the applications root directory 
except for standalone.wm.  The "Standalone" example instantiates WM directly 
and does not extend WMServlet.  Because of this its broker does not have
access to the ServletContext.  The other examples all extend WMServlet and 
thus are able to get their resources (templates) through the ServletContext.
This feature is only available with JSDK2.2+ compatable servlet containers.
By putting the template in the classes directory, the Standalone servlet is
able to locate it through the classpath.  

The alternative would have been to add a TemplatePath to the 
webmacro.properties file.  For example, you could put all of the templates 
in \tomcat\webapps\wm\WEB-INF\templates and add:

   TemplatePath: \tomcat\webapps\wm\WEB-INF\templates

to the WebMacro.properties file.  This technique should work with all 
servlet containers.  The major drawback is that it requires a manual
configuration step (since we can't know what directory you will use) which
is a frequent cause of configuration problems.  The other methods will work
out of the box, even without a WebMacro.properties file.

