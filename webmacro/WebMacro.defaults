
# DO NOT EDIT THIS FILE -- Edit WebMacro.properties instead
#
# This file contains the DEFAULT values for WebMacro. You can 
# set the actual live values in WebMacro.properties and that will
# override the settings in this file. 
#
# You can change any setting in this file by moving it to your 
# WebMacro.properties file and setting it there.

###########################################################
#
# BASIC CONFIGURATION:
#

# WebMacro compiles and caches templates for efficiency. 
#    -A value of 0 (zero) means WebMacro will never cache the template
#    -A positive value means WebMacro will recompile templates every 
#       X milliseconds
#  ie, 10000 is 10 seconds
#    -A negative value means WebMacro will only recompile templates 
#       when they change.
#  This is the default value.  It is also the most efficient and 
#   convenient value

# TemplateExpireTime = 0
TemplateExpireTime: 20000


# Character encoding. This is ONLY the encoding that is used to 
# parse templates. It does not determine the encoding that is 
# returned to the browser. WebMacro will translate templates from
# this encoding to whatever encoding the browser requests. See 
# the FastWriter class to learn how to control output encoding.
TemplateEncoding: UTF-8


# LogLevel can be: ALL, DEBUG, INFO, NOTICE, WARNING, ERROR, or NONE
# in order of most information to least information displayed.
# The top level "LogLevel" setting controls the default log level
# for any log. You can set specific levels for individual log types
# by declaring a value for LogLevel.type. WebMacro itself has the
# following types of log messages:
#
#   log        the log system itself
#   wm         high level WebMacro behavior
#   servlet    the servlet framework
#   resource   things that load other things (eg: TemplateProvider)
#   context    setting and evaluating properties in a context
#   engine     messages about parsing and executing a tempalte
#
# There may be more types than that in your system, you can learn
# what they are by setting the log level for "log" to INFO.

LogLevel: NOTICE
LogLevel.log: NOTICE
LogLevel.wm: NOTICE
LogLevel.servlet: NOTICE
LogLevel.resource: NOTICE
LogLevel.context: NOTICE
LogLevel.webcon: NOTICE
LogLevel.engine: NOTICE
LogLevel.directive: NOTICE


# LogTraceExceptions causes exception stack traces to be included in the log,
# this causes exceptions to be verbose, but may point out the exact line
# or method which is causing a fault.

LogTraceExceptions: TRUE


# Uncomment the following to log to a file rather than stderr. If your 
# standard error writes to a useful log already, you don't need this,
# but many servlet runners simply eat standard error.

# LogFile: /udir/jwells/wm.log


# Set the template (relative to TemplateDirectory) used for errors. You
# can edit this template to customize the way script failures appear

ErrorTemplate: error.wm


# Set Profile.rate to control the impact of the profiler on your CPU. 
# Set it to 0 to turn profiling off. Setting it to 1 incurs profiling 
# overhead on every event. Setting it to a number reater than 1 
# incurs profiling overhead on 1:N events. Setting it to a prime
# number is a good idea. The higher you set it, the less impact
# profiling will have on your system and the longer it will take 
# to get reasonable results from the profiler.
#
# The default is 0, disabling the profiler. 

Profile.rate: 0

# Set Profile.time to control the impact of the profiler on memory. 
# Setting # it to 0 turns the profiler off. Profile.time represents
# the number of milliseconds that the profiler stores an event for. 
# In other words, the current statistics represent all the events
# over the last Profile.time milliseconds. Setting it to a large 
# value will cause the profiler to remember a larger number of 
# events and consume more memory. 
#
# The default is 2 minutes (120000 milliseconds)

Profile.time: 120000


###########################################################
#
# ADVANCED CONFIGURATION
#

# Don't change these values unless you know what you're doing. They 
# allow you to fine-tune, extend, and customize WebMacro's behavior. 


# ResourceProviders are pluggable modules that are used to load 
# important data and code. You can create your own ResourceProviders
# to add new modules to WebMacro, or replace existing modules. 
# They are all implementations of org.webmacro.broker.ResourceProvider

Providers:  org.webmacro.resource.TemplateProvider \
            org.webmacro.resource.UrlProvider \
            org.webmacro.resource.ConfigProvider \
            org.webmacro.engine.DirectiveProvider \
            org.webmacro.directive.DirectiveProvider \
            org.webmacro.engine.ParserProvider

# The DirectiveProvider uses this list to serve up directives to 
# parsers. You can control what script directives WebMacro uses 
# by changing this list--you could even add your own. They are 
# all implementations of org.webmacro.engine.Directive

Directives:  org.webmacro.engine.ElseDirective \
             org.webmacro.engine.EscapeDirective \
             org.webmacro.engine.EncodeDirective \
             org.webmacro.engine.ForeachDirective \
             org.webmacro.engine.IfDirective \
             org.webmacro.engine.IncludeDirective \
             org.webmacro.engine.LocalDirective \
             org.webmacro.engine.ParamDirective \
             org.webmacro.engine.ParseDirective \
             org.webmacro.engine.ProfileDirective \
             org.webmacro.engine.PropertyDirective \
             org.webmacro.engine.SetDirective \
             org.webmacro.engine.SilenceDirective \
             org.webmacro.engine.UseDirective \
             org.webmacro.directive.IncludeDirective \
             org.webmacro.directive.ParseDirective \
             org.webmacro.directive.SetDirective \
             org.webmacro.directive.IfDirective \
             org.webmacro.directive.TextDirective \
             org.webmacro.directive.CommentDirective \
             org.webmacro.directive.ForeachDirective \
             org.webmacro.directive.AlternateDirective \
             org.webmacro.directive.EncodeDirective \
             org.webmacro.directive.EscapeDirective \
             org.webmacro.directive.SilenceDirective \
             org.webmacro.directive.PropertyDirective \
             org.webmacro.directive.GlobalDirective \
             org.webmacro.directive.ParamDirective \
             org.webmacro.directive.AttributeDirective 


# The following are tools which are added to your WebContext. You can 
# customize your WebContext with special tools of your own by adding 
# them to this list of classes. The only requirement is that the class 
# be public, and have a public default constructor. The instance will
# be shared betwen all instantiations of WebContext, so beware of 
# thread issues. If it implements the Macro interface it can gain 
# access to a copy of the Webcontext at runtime. The object will 
# appear in your WebContext as a variable named after its class,
# minus the word "Tool" if it appears. So CGITool below becomes
# the variable $CGI in your Template.
#
# The CGITool adds a $CGI variable with subproperties named after
# the familiar CGI variable names, such as $CGI.QUERY_STRING, etc.
#
# The FormTool adds a $Form variable to your context, with subproperties
# named after the available Form fieldnames. eg: $Form.Name would 
# return the value of HttpServletRequest.getParameterValues("Name")[0]
# The FormList tool is similar, but returns the Form value as an array
# rather than as a single entry (and is $FormList in the template).
#
# CookieTool creates a $Cookie variable which can be used to get and 
# set cookies by name. For example, $Cookie.Passowrd
#
# SessionTool creates a $Session variable that resovles to the 
# HttpSession of the current request.

WebContextTools:  org.webmacro.servlet.CGITool \
                  org.webmacro.servlet.FormTool \
                  org.webmacro.servlet.FormListTool \
                  org.webmacro.servlet.CookieTool \
                  org.webmacro.servlet.ResponseTool \
                  org.webmacro.servlet.RequestTool \
                  org.webmacro.servlet.SessionTool

ContextTools:


# The following are the parsers available to WebMacro. The parser 
# which answers to "wm" will be used for most things, but you can  
# invoke a different parser by way of the #use directive, if it has
# been included. These parsers all impoement org.webmacro.engine.Parser

Parsers:  org.webmacro.engine.WMParser \
          org.webmacro.engine.NullParser \
          org.webmacro.engine.TextParser

