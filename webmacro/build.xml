<!--
    In order to compile WebMacro, you may need to set these environment variables
        JAVACC_HOME: your JavaCC installation home
 -->
<!--
    Note, you will need ANT 1.5.x, available from:
          http://jakarta.apache.org/ant
-->
<project name="WebMacro" default="usage" basedir=".">

    <target name="usage">
        <echo><![CDATA[
Usage:
    ant TARGET [-Dproperty1=value -DpropertyN=value]

Common targets:
    clean
        Remove all temporary files created during build process
    compile
        Compile all principal source files
    compile-optional
        Compiles all optional source files
    jar
        Create "webmacro.jar"
    javadoc
        Generate javadocs
    test
        Execute entire test suite against current sources
    test -Dtest=TestSomething
        Execute a specific test.  No need to specify full classname.
        Useful to quickly test a specific aspect of WebMacro
    all
        do it all, baby!

Administrative targets:
    dist-binary
        Build a binary distro of WebMacro
    dist-source
        Build a source distro of WebMacro
    release
        Build both binary and source distros and .zip and .tgz 'em both
    ]]></echo>
    </target>

    <property name="version"        value="2.0" />
    <property name="wm-style"       value="classic" /> <!-- can be "minimal" to get webmacro.defaults.minimal into build-->
    <property name="app.name"       value="webmacro" />
    <property name="tmpdir"         value="tmp" />
    <property name="classes"        value="classes"/>
	  <property name="macros"         value="macros"/>
    <property name="dist.binary"    value="webmacro-${wm-style}-bin-${version}"/>
	  <!-- The formal value not used for distribution:
	  	<property name="dist.source"    value="webmacro-${wm-style}-src-${version}"/> 
	  -->
		<property name="dist.source"    value="webmacro-${version}"/> 
    <property name="javadoc"        value="javadoc"/>
    <property name="examples"       value="examples"/>
    <property name="jar"            value="${app.name}.jar"/>
    <property name="src.jar"        value="${app.name}-src.jar"/>
    <property environment="ENV" />
    <property name="javacc.home"    value="${ENV.JAVACC_HOME}" />

    <path id="class.path">
        <fileset dir="lib">
            <include name="*.jar" />
            <include name="*.zip" />
        </fileset>
        <pathelement location="${classes}" />
        <pathelement location="${macros}" />
        <pathelement path="${java.class.path}" />
    </path>
    <property name="classpath.resolved" refid="class.path"/>

    <taskdef name="javacc"
        classname="org.apache.tools.ant.taskdefs.optional.javacc.JavaCC">
            <classpath refid="class.path"/>
    </taskdef>

    <target name="prepare">
        <tstamp />
        <mkdir  dir="${classes}"/>
        <mkdir  dir="${javadoc}"/>
        <mkdir  dir="${dist.binary}"/>
        <mkdir  dir="${examples}/WEB-INF"/>
        <mkdir  dir="${examples}/WEB-INF/classes"/>
        <mkdir  dir="${examples}/WEB-INF/lib"/>
        <mkdir  dir="${dist.binary}"/>
        <mkdir  dir="${dist.source}"/>
        <available property="javacc.present" classname="org.javacc.parser.Main"
            classpath="${javacc.home}/javacc.jar" />
        <!-- <available property="javacc.present" classname="COM.sun.labs.javacc.Main" classpath="${javacc.home}/JavaCC.zip" /> -->
    </target>


    <target name="clean" depends="test-clean">
        <delete dir="${classes}"/>
        <delete dir="${javadoc}"/>
        <delete dir="${dist.binary}"/>
        <delete file="${dist.binary}.tgz"/>
        <delete file="${dist.binary}.zip"/>
        <delete dir="${dist.source}"/>
        <delete file="${dist.source}.tgz"/>
        <delete file="${dist.source}.zip"/>
        <delete file="${jar}"/>
        <delete file="${src.jar}"/>
        <delete dir="${tmpdir}"/>
        <delete dir="${examples}/WEB-INF"/>
        <delete dir="${tmpdir}"/>
        <ant antfile="test/build.xml" target="unit-clean" />
    </target>

    <target name='javacc' depends='prepare' if='javacc.present'>
        <javacc target="src/org/webmacro/parser/WMParser_impl.jj" javacchome="${javacc.home}" />
    </target>

    <target name="precompile" depends="javacc" if="javacc.present">
    </target>

    <target name="compile" depends="prepare, precompile">
        <filter token="VERSION" value="${version}" />
        <filter token="BUILD_DATE" value="${TODAY}" />
        <copy todir="${tmpdir}" filtering="true">
            <fileset dir="src" />
        </copy>
        <javac srcdir="${tmpdir}"
	    fork="Yes"
	    destdir="${classes}"
            debug="on" optimize="off" deprecation="off">
            <classpath refid="class.path" />
        </javac>

        <copy todir="${classes}">
            <fileset dir="${tmpdir}" includes="**/*.properties" />
        </copy>
        <copy file="WebMacro.defaults.${wm-style}" tofile="${classes}/WebMacro.defaults"/>

        <touch file="${classes}/WM-VERSION-${version}" />
    </target>

    <target name="compile-optional" depends="compile">
        <filter token="VERSION" value="${version}" />
        <filter token="BUILD_DATE" value="${TODAY}" />
                <copy todir="${tmpdir}" filtering="true">
            <fileset dir="src-optional" />
        </copy>
        <javac srcdir="${tmpdir}" destdir="${classes}"
            debug="on" optimize="off" deprecation="off">
            <classpath refid="class.path" />
        </javac>
    </target>

    <target name="compile-examples" depends="compile">
        <filter token="VERSION" value="${version}" />
        <filter token="BUILD_DATE" value="${TODAY}" />
        <javac srcdir="${examples}" destdir="${examples}/WEB-INF/classes"
            debug="on" optimize="off" deprecation="off">
            <classpath refid="class.path" />
        </javac>
        <copy		file="${examples}/web.xml" tofile="${examples}/WEB-INF/web.xml"/>
    </target>


    <target name="javadoc" depends="prepare">
        <javadoc sourcepath="src" destdir="${javadoc}"
            packagenames="org.*" author="true" version="true"
            use="true">
            <classpath refid="class.path" />
        </javadoc>
    </target>


    <target name="jar" depends="prepare,compile">
        <jar jarfile="${jar}" basedir="${classes}">
            <manifest>
                <attribute name="Main-Class" value="org.webmacro.WM" />
                <attribute name="Build-Date" value="${TODAY}" />
            </manifest>
        </jar>
    </target>

    <target name="dist-binary" depends="prepare,compile,compile-examples,jar,javadoc">
        <delete dir='${dist.binary}' />
        <mkdir dir='${dist.binary}' />
        <copy todir="${dist.binary}" file="${jar}"/>
        <copy todir="${dist.binary}" file="lib/concurrent.jar" /> 
        <copy todir="${dist.binary}">
            <fileset dir="distroot" />
        </copy>

        <mkdir dir="${dist.binary}/tutorial" />
        <copy todir="${dist.binary}/tutorial">
            <fileset dir="tutorial"/>
        </copy>
        <mkdir dir="${dist.binary}/api" />
        <copy todir="${dist.binary}/api">
            <fileset dir="${javadoc}"/>
        </copy>
        <mkdir dir="${dist.binary}/examples" />
        <copy todir="${dist.binary}/examples">
            <fileset dir="examples" />
        </copy>
        <mkdir dir="${dist.binary}/macros" />
        <copy todir="${dist.binary}/macros">
            <fileset dir="${macros}" />
        </copy>
        <touch file="${dist.binary}/WM-VERSION-${version}"/>
    </target>

    <target name="dist-source" depends="prepare">
        <delete dir='${dist.source}' />
        <mkdir dir='${dist.source}' />
        <copy todir="${dist.source}">
            <fileset dir="distroot" />
        </copy>
      <copy file='WebMacro.defaults.minimal' todir='${dist.source}' />
      <copy file='WebMacro.defaults.classic' todir='${dist.source}' />
      <copy file='build.xml' todir='${dist.source}' />

      <mkdir dir="${dist.source}/src" />
        <copy todir="${dist.source}/src">
            <fileset dir="src" />
        </copy>

      <mkdir dir="${dist.source}/javadoc" />
        <copy todir="${dist.source}/javadoc">
            <fileset dir="javadoc" />
        </copy>

      <mkdir dir="${dist.source}/src-optional" />
        <copy todir="${dist.source}/src-optional">
            <fileset dir="src-optional" />
        </copy>

        <mkdir dir="${dist.source}/test" />
        <copy todir="${dist.source}/test">
            <fileset dir="test" />
        </copy>

        <mkdir dir="${dist.source}/lib" />
        <copy todir="${dist.source}/lib">
            <fileset dir="lib" />
        </copy>

        <mkdir dir="${dist.source}/tutorial" />
        <copy todir="${dist.source}/tutorial">
            <fileset dir="tutorial"/>
        </copy>

      <mkdir dir="${dist.source}/examples" />
        <copy todir="${dist.source}/examples">
            <fileset dir="examples" />
        </copy>

      <mkdir dir="${dist.source}/macros" />
      <copy todir="${dist.source}/macros">
          <fileset dir="${macros}" />
      </copy>

      <mkdir dir="${dist.source}/distroot" />
      <copy todir="${dist.source}/distroot">
          <fileset dir="distroot" />
      </copy>

      <touch file="${dist.source}/WM-VERSION-${version}"/>
 
    </target>

    <target name='zip.and.tar' depends='dist-binary,dist-source'>
        <zip destfile='${dist.binary}.zip' basedir='.' includes='${dist.binary}/**/*' />
        <zip destfile='${dist.source}.zip' basedir='.' includes='${dist.source}/**/*' />

        <tar destfile='${dist.binary}.tgz' longfile='gnu' compression='gzip' basedir='.' includes='${dist.binary}/**/*' />
        <tar destfile='${dist.source}.tgz' longfile='gnu' compression='gzip' basedir='.' includes='${dist.source}/**/*' />
    </target>

    <target name='release' depends='clean,test,dist-binary,dist-source,zip.and.tar' />

    <!--
      <target name="contrib" depends="compile" >
        <ant antfile="contrib/build.xml" target="all" >
          <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
      </target>
    -->

    <target name="test" depends="compile" >
        <ant antfile="test/build.xml" target="all" >
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-unit" depends="compile" >
        <ant antfile="test/build.xml" target="unit" >
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-validate" depends="compile" >
        <ant antfile="test/build.xml" target="validate" >
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-templates" depends="compile" >
        <ant antfile="test/build.xml" target="templates" >
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-synthetic" depends="compile" >
        <ant antfile="test/build.xml" target="synthetic" >
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-macro" depends="compile" >
        <ant antfile="test/build.xml" target="macros" >
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-clean" >
        <ant antfile="test/build.xml" target="clean">
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="test-compile" >
        <ant antfile="test/build.xml" target="unit-compile">
            <property name="java.class.path" value="${classpath.resolved}"/>
        </ant>
    </target>

    <target name="all" depends="clean,prepare,compile,javadoc,dist-source,dist-binary,test-unit"/>

    <!--
    Note: there are two tasks:
    (1) Parsing a template which checks the grammar syntax
    (2) Evaluating a template which evaluates a template using a context
    provided by the template or some bean

    MOTE: the tasks are independent. (1) and/or (2) can be run completely
    independent of the other!

    <taskdef name="wmtemplates"
     classname="org.webmacro.tools.WMTemplateAntTask" >
      <classpath refid="class.path" />
    </taskdef>

    <taskdef name="wmevaltemplates"
     classname="org.webmacro.tools.TemplateEvalAntTask" >
     <classpath refid="class.path" />
    </taskdef>

    <target name="templates">
      <wmtemplates>
        <fileset dir="." includes="**/*.wm"/>
        <classpath refid="class.path" />
      </wmtemplates>

      <wmevaltemplates>
        <fileset dir="templates" includes="**/*.wm"/>
        <classpath refid="class.path" />
      </wmevaltemplates>

    </target>
    -->

</project>


