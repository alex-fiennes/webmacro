# NOTE FOR NT USERS
#
# Beware that the \ character is the escape character in a Java
# properties file. You must either double it (\\) or use the Unix
# style (/) file separator in this file. Both should work. Also
# when you set TemplatePath, be sure and use the NT path
# separator (;) rather than the Unix separator (:).



###########################################################
#
# BASIC CONFIGURATION:
#

# You should set TemplatePath, at the very least! It is a list of
# directories which will be searched for your templates, if you
# give a relative filename. It is a list of directories separated
# by a : (on Unix) or a ; (on NT).

##TemplatePath: /udir/jwells/webmacro/templates
TemplatePath = e:/work/DataTable/templates

# WebMacro compiles and caches templates for efficiency. During development
# you will want to turn this off by setting the following value to 0, so
# that your template changes are immediately reflected on the website. In
# production systems, this it the number of milliseconds of idle time
# that a cached template will be retained, ie: 60000 is one minute.

TemplateExpireTime = 0
##TemplateExpireTime: 5000


# LogLevel can be: ALL, DEBUG, EXCEPTION, ERROR, WARNING, INFO, or NONE
# in order of most information to least information displayed.
# The top level "LogLevel" setting controls the default log level
# for any log. You can set specific levels for individual log types
# by declaring a value for LogLevel.type. WebMacro itself has the
# following types of log messages:
#
#   log        the log system itself
#   wm         high level WebMacro behavior
#   servlet    the servlet framework
#   resource   things that load other things (eg: TemplateProvider)
#   context    setting and evaluating properties in a context
#   engine     messages about parsing and executing a tempalte
#
# There may be more types than that in your system, you can learn
# what they are by setting the log level for "log" to INFO.

LogLevel = NOTICE
LogLevel.log = NOTICE
LogLevel.wm = INFO
LogLevel.servlet = NOTICE
LogLevel.resource = NOTICE
LogLevel.context = NOTICE
LogLevel.webcon = NOTICE
LogLevel.engine = NOTICE


# LogTraceExceptions causes exception stack traces to be included in the log,
# this causes exceptions to be verbose, but may point out the exact line
# or method which is causing a fault.

LogTraceExceptions = TRUE


# Uncomment the following to log to a file rather than stderr. If your
# standard error writes to a useful log already, you don't need this,
# but many servlet runners simply eat standard error.

# LogFile = /udir/jwells/wm.log
##LogFile = e:/work/wmtest/wm.log


# Set the template (relative to TemplateDirectory) used for errors. You
# can edit this template to customize the way script failures appear

ErrorTemplate = error.wm



###########################################################
#
# ADVANCED CONFIGURATION
#

# Don't change these values unless you know what you're doing. They
# allow you to fine-tune, extend, and customize WebMacro's behavior.


# ResourceProviders are pluggable modules that are used to load
# important data and code. You can create your own ResourceProviders
# to add new modules to WebMacro, or replace existing modules.
# They are all implementations of org.webmacro.broker.ResourceProvider

Providers = org.webmacro.resource.TemplateProvider \
            org.webmacro.resource.UrlProvider \
            org.webmacro.resource.ConfigProvider \
            org.webmacro.engine.DirectiveProvider \
            org.webmacro.engine.ParserProvider

# The DirectiveProvider uses this list to serve up directives to
# parsers. You can control what script directives WebMacro uses
# by changing this list--you could even add your own. They are
# all implementations of org.webmacro.engine.Directive

Directives = org.webmacro.engine.IncludeDirective \
             org.webmacro.engine.ParseDirective \
             org.webmacro.engine.SetDirective \
             org.webmacro.engine.IfDirective \
             org.webmacro.engine.ElseDirective \
             org.webmacro.engine.UseDirective \
             org.webmacro.engine.EncodeDirective \
             org.webmacro.engine.SilenceDirective \
             org.webmacro.engine.EscapeDirective \
             org.webmacro.engine.ParamDirective \
             org.webmacro.engine.ForeachDirective \
             org.webmacro.engine.LocalDirective \
             org.webmacro.engine.PropertyDirective \
             org.webmacro.engine.ToolDirective


# The following are tools which are added to your WebContext. You can
# customize your WebContext with special tools of your own by adding
# them to this list of classes. The only requirement is that the class
# be public, and have a public default constructor. The instance will
# be shared betwen all instantiations of WebContext, so beware of
# thread issues. If it implements the Macro interface it can gain
# access to a copy of the Webcontext at runtime. The object will
# appear in your WebContext as a variable named after its class,
# minus the word "Tool" if it appears. So CGITool below becomes
# the variable $CGI in your Template.
#
# The CGITool adds a $CGI variable with subproperties named after
# the familiar CGI variable names, such as $CGI.QUERY_STRING, etc.
#
# The FormTool adds a $Form variable to your context, with subproperties
# named after the available Form fieldnames. eg: $Form.Name would
# return the value of HttpServletRequest.getParameterValues("Name")[0]
# The FormList tool is similar, but returns the Form value as an array
# rather than as a single entry (and is $FormList in the template).
#
# CookieTool creates a $Cookie variable which can be used to get and
# set cookies by name. For example, $Cookie.Passowrd
#
# SessionTool creates a $Session variable that resovles to the
# HttpSession of the current request.

ContextTools = org.webmacro.servlet.CGITool \
               org.webmacro.servlet.FormTool \
               org.webmacro.servlet.FormListTool \
               org.webmacro.servlet.CookieTool \
               org.webmacro.servlet.ResponseTool \
               org.webmacro.servlet.RequestTool \
               org.webmacro.servlet.SessionTool \
               org.webmacro.servlet.ListTool

WebContextTools =


# The following are the parsers available to WebMacro. The parser
# which answers to "wm" will be used for most things, but you can
# invoke a different parser by way of the #use directive, if it has
# been included. These parsers all impoement org.webmacro.engine.Parser

Parsers = org.webmacro.engine.WMParser \
          org.webmacro.engine.NullParser \
          org.webmacro.engine.TextParser


