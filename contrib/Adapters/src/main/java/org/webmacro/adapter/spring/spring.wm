#comment
 * spring.wm
 *
 * This file consists of a collection of WebMacro macros aimed at easing
 * some of the common requirements of web applications - in particular
 * handling of forms.
 *
 * To take advantage of these macros, the "exposeSpringMacroHelpers" property
 * of the WebMacroViewResolver class needs to be set to "true". This will expose a
 * RequestContext under the name "springMacroRequestContext", as needed by
 * the macros in this library.
 *
 * This file is adapted from the good work of the Velocity team's spring.vm
 *
 * @author Marc Palmer
 * @since 2.0
 *
 * @todo Notice that this (even the Velocity version) appears to
 * reference a lot of context variables such as $springMacroXXXX that
 * do not appear to be defined anywhere currently. Therefore these
 * will probably not work at all yet.
#end

#comment
 * blankNull
 *
 * Macro to return empty string for if value of parameter passed is null,
 * equivalent to Velocity's $!xxx syntax where xxx is null
#end
#macro blankNull($var)
#if ($var != null) $var #end
#end

#comment
 * springCloseTag
 *
 * Simple macro to close an HTML tag that has no body with '>' or '/>',
 * depending on the value of a 'springXhtmlCompliant' variable in the
 * template context.
#end
#macro springCloseTag
#if ($springXhtmlCompliant) /> #else > #end
#end

#comment
 * springMessage
 *
 * Macro to translate a message code into a message.
#end
#macro springMessage( $code )
$springMacroRequestContext.getMessage($code)
#end

#comment
 * springMessageText
 *
 * Macro to translate a message code into a message,
 * using the given default text if no message found.
#end
#macro springMessageText( $code, $text )
$springMacroRequestContext.getMessage($code, $text)
#end

#comment
 * springURL
 *
 * Takes a relative URL and makes it absolute from the server root by
 * adding the context root for the web application.
#end
#macro springURL( $relativeUrl ) $(springMacroRequestContext.ContextPath)$relativeUrl #end

#comment
 * springBind
 *
 * Exposes a BindStatus object for the given bind path, which can be
 * a bean (e.g. "person") to get global errors, or a bean property
 * (e.g. "person.name") to get field errors. Can be called multiple times
 * within a form to bind to multiple command objects and/or field names.
 *
 * This macro will participate in the default HTML escape setting for the given
 * RequestContext. This can be customized by calling "setDefaultHtmlEscape"
 * on the "springMacroRequestContext" context variable, or via the
 * "defaultHtmlEscape" context-param in web.xml (same as for the JSP bind tag).
 * Also regards a "springHtmlEscape" variable in the template context.
 *
 * Producing no output, the following context variable will be available
 * each time this macro is referenced:
 *
 *   $status : a BindStatus instance holding the command object name,
 *   expression, value, and error codes and messages for the path supplied
 *
 * @param $path : the path (string value) of the value required to bind to.
 *   Spring defaults to a command name of "command" but this can be overridden
 *   by user config.
#end
#macro springBind( $path )
	#if($springHtmlEscape)
		#set $status = $springMacroRequestContext.getBindStatus($path, $springHtmlEscape)
	#else
		#set $status = $springMacroRequestContext.getBindStatus($path)
	#end
#end

#comment
 * springBindEscaped
 *
 * Similar to springBind, but takes an explicit HTML escape flag rather
 * than relying on the default HTML escape setting.
#end
#macro springBindEscaped( $path, $htmlEscape )
	#set $status = $springMacroRequestContext.getBindStatus($path, $htmlEscape)
#end

#comment
 * springFormInput
 *
 * Display a form input field of type 'text' and bind it to an attribute
 * of a command or bean.
 *
 * @param path the name of the field to bind to
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
 *
#end
#macro springFormInput( $path, $attributes )
	#springBind($path)
	<input type="text" name="$status.Expression" value="#blankNull($status.Value)" $(attributes)#springCloseTag()
#end

#comment
 * springFormPasswordInput
 *
 * Display a form input field of type 'password' and bind it to an attribute
 * of a command or bean.  No value will ever be specified for this field regardless
 * of whether one exists or not.  For hopefully obvious reasons!
 *
 * @param path the name of the field to bind to
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
 *
#end
#macro springFormPasswordInput( $path, $attributes )
	#springBind($path)
	<input type="password" name="$status.Expression" value="" $(attributes)#springCloseTag
#end

#comment
 * springFormHiddenInput
 *
 * Generate a form input field of type 'hidden' and bind it to an attribute
 * of a command or bean.
 *
 * @param path the name of the field to bind to
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
 *
#end
#macro springFormHiddenInput( $path, $attributes )
	#springBind($path)
	<input type="hidden" name="$status.Expression" value="#blankNull($status.Value)" $(attributes)#springCloseTag()
#end

#comment
 * formTextArea
 *
 * display a text area and bind it to an attribute
 * of a command or bean
 *
 * @param path the name of the field to bind to
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
 *
#end
#macro springFormTextarea ($path, $attributes )
	#springBind($path)
	<textarea name="$status.Expression" $(attributes)>#blankNull($status.Value)</textarea>
#end

#comment
 * springFormSingleSelect
 *
 * Show a selectbox (dropdown) input element allowing a single value to be chosen
 * from a list of options.
 *
 * @param path the name of the field to bind to
 * @param options a map (value=label) of all the available options
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
#end
#macro springFormSingleSelect( $path, $options, $attributes )
	#springBind($path)
	<select name="$status.Expression" $(attributes)>
		#foreach $option in $options.keySet()
			<option value="$option"
			#if("#blankNull($status.Value)" == $option)
				selected="selected"
			#end>
			$options.get($option)</option>
		#end
	</select>
#end

#comment
 * springFormMultiSelect
 *
 * Show a listbox of options allowing the user to make 0 or more choices from
 * the list of options.
 *
 * @param path the name of the field to bind to
 * @param options a map (value=label) of all the available options
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
#end
#macro springFormMultiSelect( $path, $options, $attributes )
	#springBind($path)
	<select multiple="multiple" name="$status.Expression" $(attributes)>
		#foreach $option in $options.keySet()
			<option value="$option"
			#foreach $item in $status.Value
				#if ($item == $option)
					selected="selected"
				#end
			#end
			>$options.get($option)</option>
		#end
	</select>
#end

#comment
 * springFormRadioButtons
 *
 * Show radio buttons.
 *
 * @param path the name of the field to bind to
 * @param options a map (value=label) of all the available options
 * @param separator the html tag or other character list that should be used to
 *        separate each option.  Typically '&nbsp;' or '<br>'
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
#end
#macro springFormRadioButtons( $path, $options, $separator, $attributes )
	#springBind($path)
	#foreach $option in $options.keySet()
		<input type="radio" name="$status.Expression" value="$option"
		#if("#blankNull($status.Value)" == "$option")
			checked="checked"
		#end
		$attributes
		#springCloseTag()
		$options.get($option) $separator
	#end
#end

#comment
 * springFormCheckboxes
 *
 * Show checkboxes.
 *
 * @param path the name of the field to bind to
 * @param options a map (value=label) of all the available options
 * @param separator the html tag or other character list that should be used to
 *        separate each option.  Typically '&nbsp;' or '<br>'
 * @param attributes any additional attributes for the element (such as class
 *        or CSS styles or size
#end
#macro springFormCheckboxes( $path, $options, $separator, $attributes )
	#springBind($path)
	#foreach $option in $options.keySet()
		<input type="checkbox" name="$status.Expression" value="$option"
		#foreach $item in $status.Value
			#if ($item == $option)
				checked="checked"
			#end
		#end
		$attributes #springCloseTag()
		$options.get($option) $separator
	#end
#end

#comment
 * springShowErrors
 *
 * Show validation errors for the currently bound field, with
 * optional style attributes.
 *
 * @param separator the html tag or other character list that should be used to
 *        separate each option. Typically '<br>'.
 * @param classOrStyle either the name of a CSS class element (which is defined in
 *        the template or an external CSS file) or an inline style.  If the value passed in here
 *        contains a colon (:) then a 'style=' attribute will be used, else a 'class=' attribute
 *        will be used.
#end
#macro springShowErrors( $separator, $classOrStyle )
	#foreach $error in $status.ErrorMessages
		#if ($classOrStyle == null)
			<b>$error</b>
		#else
			#if ($classOrStyle.indexOf(":") == -1)
				#set $attr="class"
			#else
				#set $attr="style"
			#end
			<span $attr="$classOrStyle">$error</span>
		#end
		$separator
	#end
#end

#comment
 * springShowIfErros
 *
 * Macro to display the parameter (typicaly HTML but any object)
 * if there was at least 1 error in the last #springBind
 *
#end
#macro springShowIfErrors( $fragment) #if ($List.size($status.ErrorMessages) > 0) $fragment #end #end

