

create type Credential as object (
  seqNbr number(12),
  loginName varchar2(80),
  password varchar2(16),
  granted number(1)
);

create table Credentials (
  seqNbr number(12),
  loginName varchar2(80),
  password varchar2(16),
  granted number(1)
);
/*
 * Class Generation Performed By The Open Doors Software Persistence Module with
 * support from the WebMacro Community and WebMacro Software Project.
 * Date and Time of Generation: Tue Oct 30 10:12:18 PST 2001
 * WebMacro Version: 1.0rc1.
 */
package org.webmacro.store;
import java.sql.*;

/**
 * Credential is a class which
 * implements sql persistence via the java.sql.SQLData interface.
 * <p>
 * It exposes the data instance members on a public
 * basis for introspection and access purposes. There
 * is no special behavior associated with this class.
 * <p>
 * It is expected that subclasses would wrap this class with specific
 * behaviors on the data values as required.
 * <p>
 * This class is automatically generated. Changes made by hand are not
 * preserved from one generation run to the next.
 * @see org.opendoors.store.ORSchema
 * @see org.opendoors.store.SQLDataDef.tml
 */
public class Credential implements SQLData {
  public long seqNbr;
  public String loginName;
  public String password;
  public boolean granted;
  
  /** The name of the sql type for the jdbc sql map. */
  public static final String SQL_MAP_NAME = "Def.Credential";

  /** The public constructor. */
  public Credential() {}
  
  // the SQL Data interface.
  /**
   * Gets the map name found used in the database.
   * @see java.sql.SQLData
   * @return The map name found in the sql schema which by convention
   * is the name of the class. 
   */
  public String getSQLTypeName() throws SQLException {
    return SQL_MAP_NAME;
  }

  /**
   * Writes the members in proper order to the sql stream.
   */
  public void writeSQL(SQLOutput stream) throws SQLException {
    stream.writeLong(seqNbr);
    stream.writeString(loginName);
    stream.writeString(password);
    stream.writeBoolean(granted);
  }
  /**
   * Reads the sql stream in proper order into the members.
   */
  public void readSQL(SQLInput stream, String sqlTypeName) throws SQLException {
    seqNbr = stream.readLong();
    loginName = stream.readString();
    password = stream.readString();
    granted = stream.readBoolean();
  }
}




